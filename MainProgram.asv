clc;

%% This is the main program for hyperspectral image classification.
%
% Author: Dhanushka
%

%% Program execution guide.

% Depending on the application needs, the necesary parts of the program
% should be executed using "Run Section" command in the main toolbar.

%% Add necessary folders to path

    addpath HelperFunctions ClassificationMethods BandSelectionMethods 
    addpath AdditionalMatlabScripts HsiToRgb ImageQualityMatrices FilterMethods

    
%% Get HSI images into workspace and perform calculate relative reflectance.

classifyingLargeDataSet = false;        % This is only applicable for classyfing full image folder contain more than 1 image.

ReadSpecimData();                       % Reads all the files into workspace.


%% get training data for each class. This step need to be done class-by-class.

% Keep the same format as [tree_cube_Ref, tree_labels]
[sm_cube_Ref, sm_labels] = CollectObjectClassData("person", reflectanceCube.DataCube);

[classCube, classLabels] = UpdateClassSampleCubes("person", sm_cube_Ref, sm_labels, false);

clear sm_cube_Ref sm_labels classCube classLabels;

% Save data using UtilityFunctions.m


%% Read all the training / testing data MAT files into workspace.

trainingDataFolder = 'G:\3. Hyperspectral\5. Matlab HSI\3. TrainingData Mat Files\'; 
matFilesList = dir(trainingDataFolder);

for nFile = 1:length(matFilesList)
    if contains(matFilesList(nFile).name, '.mat')
        path = fullfile(trainingDataFolder, matFilesList(nFile).name);
        load (path);
    end
end

clear trainingDataFolder nFile matFilesList path;
%% Convert training data into 1-D array with n-samples.

TrainingPixelClassesTo1D();


%% Band selection methods

reduced_bands_count = 16;

bSet = Min_Max_Pooling(training_Data', reduced_bands_count);

% layer_ids = Mean_Pooling(training_Data', round(204 / reduced_bands_count));

% % Distance density method needs first time full network training.
% height = 1;
% width = bands;
% channels = 1;
% 
% % Get neural network
% Cnn_Distance_Density();
% 
% distance_dens_net = trainNetwork(trainingDataCnn, trainingLabelCnn, cnn_distance_density, opts);


%%

[bSetDd, acc] = DistanceDensityBandSelection(testDataCnn, testLabelCnn, 4, 50, 9)

%% Training
height = 1;
width = reduced_bands_count;
channels = 1;

% Get neural network
% [cnn_distance_density, opts] = CnnDistanceDensityNetwork(height, width, channels);
[network, options] = Cnn1D16bands(height, width, channels);

reducedBandData = ReducedBandImage(trainingDataCnn, bSet);

trainedNet = trainNetwork(reducedBandData, trainingLabelCnn, network, options);


%% Prediction
% call HSI_Cnn_1D_Dataset.m file. This should run section by section.

method = 'svm';

switch (method)
    case 'svm'
        SVM_Classifier();
    case 'cnn'
        predictY = predict(trainedNet, CNN_TestPixels);
        
    case 'sam'
        % Spectral Angle Mapper
resultVec = SamClassification(reflectanceCube.DataCube);
end
%% Display classification




classifiedImage = DisplayClassificationResult(resultVec, cols, lines);

figure();
imshow(classifiedImage)

%% Classification  accuracy

accuracy = ClassificationAccuracy(groundTruthImage, classifiedImage ) % imageResult

